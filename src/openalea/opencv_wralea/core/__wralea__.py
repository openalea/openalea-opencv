# This file has been automatically generated by pkg_builder

from openalea.core import *

__name__ = 'openalea.opencv.core'
__version__ = '1.0.0'
__license__ = 'CeCILL-C'
__author__ = 'M.Mielewczik, C.Fournier, C. Pradal'
__institutes__ = None
__description__ = ''
__url__ = 'http://openalea.gforge.inria.fr'

__editable__ = 'True'
__icon__ = 'core.png'
__alias__ = []

__all__ = []

imagetypes = ['uint8', 'int8', 'uint16', 'int16', 'int32', 'float32', 'float64']
fontfaces  =[' FONT_HERSHEY_SIMPLEX', 'FONT_HERSHEY_PLAIN', 'FONT_HERSHEY_DUPLEX', 'FONT_HERSHEY_COMPLEX', 'FONT_HERSHEY_TRIPLEX', 'FONT_HERSHEY_COMPLEX_SMALL', 'FONT_HERSHEY_SCRIPT_SIMPLEX', 'FONT_HERSHEY_SCRIPT_COMPLEX']
imreadflags = ['IMREAD_UNCHANGED', 'IMREAD_COLOR', 'IMREAD_GRAYSCALE']


cv2imread = Factory(name='imread',
                               authors='(M.Mielewczik)',
                               description='Loads an image from file into memory.',
                               category='Image Processing, Data I/O',
                               nodemodule = 'openalea.opencv.nodes',
                               nodeclass = 'imread',
                               inputs=[{'interface': IFileStr, 'name': 'Imagefile', 'desc': 'Imagefile to be loaded.'},
                                       {'interface': IEnumStr(enum=imreadflags), 'name': 'flags', 'value': 'CV_LOAD_IMAGE_UNCHANGED', 'desc': 'Select flags that should be used for imread.'}],
                               outputs=({'interface': None, 'name': 'out', 'desc': 'Loaded image in memory.'},),
                               alias= 'LoadImage',
                               )

__all__.append('cv2imread')


cv2imreads = Factory(name='imreads',
                               authors='(C.Fournier)',
                               description='Returns an image iterator over an image path list',
                               category='Image Processing, Data I/O',
                               nodemodule = 'openalea.opencv.extension',
                               nodeclass = 'imreads',
                               inputs=[{'interface': ISequence, 'name': 'Imagefile_list', 'desc': 'Imagefiles to be loaded.'},
                                       {'interface': IEnumStr(enum=imreadflags), 'name': 'flags', 'value': 'CV_LOAD_IMAGE_UNCHANGED', 'desc': 'Select flags that should be used for imread.'}],
                               outputs=({'interface': ISequence, 'name': 'Image iterator', 'desc': 'Iterator overthe images'},
                               {'interface': IInt, 'name': 'n_images', 'desc': 'number of images in the iterator'}),
                               )

__all__.append('cv2imreads')

cv2imwrite = Factory(name='imwrite',
                                category='Image Processing, Data I/O',
                                description='Saves the image to the specified file. The image format is chosen based on the filename extension',
                                nodemodule = 'cv2',
                                nodeclass = 'imwrite',
                                inputs=[{'interface': IFileStr, 'name': 'ImagePath'}, 
                                        {'interface': None, 'name': 'image'}],
                                outputs=({'interface': None, 'name': 'out'},),
                                #inputs=[{'interface': IFileStr, 'name': 'Image'},{'interface': IEnumStr(enum=imagefileformatsflags), 'name': 'flags', 'value': 'PNG'},
                                #       (if enum == 'JPEG': {'interface': IInt(0, 100), 'name': 'params', 'value': 100})],
                                )

__all__.append('cv2imwrite')



opencv2_cv_add = Factory(name='cv_add',
                authors=' (C.Fournier)',
                description='addition of two images using saturation arithmetics',
                category='Image Processing',
                nodemodule='cv2',
                nodeclass='add',
                inputs=[{'interface': None, 'name': 'Image1'},
                        {'interface': None, 'name': 'Image2'}],
                outputs=({'interface': None, 'name': 'out'},),
                widgetmodule=None,
                widgetclass=None,
               )               
__all__.append('opencv2_cv_add')

opencv2_cv_subtract = Factory(name='cv_subtract',
                authors=' (C.Fournier)',
                description='subtract of two images using saturation arithmetics',
                category='Image Processing',
                nodemodule='cv2',
                nodeclass='subtract',
                inputs=[{'interface': None, 'name': 'Image1'},
                        {'interface': None, 'name': 'Image2'}],
                outputs=({'interface': None, 'name': 'out'},),
                widgetmodule=None,
                widgetclass=None,
               )               
__all__.append('opencv2_cv_subtract')

opencv2_absdiff = Factory(name='absdiff',
                authors=' (M.Mielewczik)',
                description='Absolute difference between two images (saturated arithmetics)',
                category='Image Processing',
                nodemodule='cv2',
                nodeclass='absdiff',
                inputs=[{'interface': None, 'name': 'Image1'},
                        {'interface': None, 'name': 'Image2'}],
                outputs=[{'interface': None, 'name': 'Image'}], 
                widgetmodule=None,
                widgetclass=None,
               )
               
__all__.append('opencv2_absdiff')             

opencv2_cv_addWeighted = Factory(name='addWeighted',
                authors=' (C.Fournier)',
                description='Return a blended image : w1 * image1 + w2 * image2 + offset',
                category='Image Processing',
                nodemodule='cv2',
                nodeclass='addWeighted',
                inputs=[{'interface': None, 'name': 'Image1'},{'interface': IFloat, 'name': 'w1', 'value':0.5},
                {'interface': None, 'name': 'Image2'},{'interface': IFloat, 'name': 'w2', 'value':0.5},
                {'interface': IFloat, 'name': 'offset','value':0.0}],
                outputs=({'interface': None, 'name': 'out'},),
                widgetmodule=None,
                widgetclass=None,
               )               
__all__.append('opencv2_cv_addWeighted')

opencv2_cv_mean = Factory(name='cv_mean',
                authors=' (C.Fournier)',
                description='',
                category='Image Processing',
                nodemodule='openalea.opencv.extension',
                nodeclass='cv_mean',
                inputs=[{'interface': None, 'name': 'Image iterator'}, {'interface': IInt, 'name': 'number of images'}],
                outputs=({'interface': None, 'name': 'mean_image'},),
                widgetmodule=None,
                widgetclass=None,
               )               
__all__.append('opencv2_cv_mean')



opencv2_CreateImage = Factory(name='CreateImage',
                authors=' (C. Fournier)',
                description='',
                category='Image Processing',
                nodemodule='openalea.opencv.extension',
                nodeclass='CreateImage',
                inputs=[{'interface': IInt, 'name': 'Height', 'value': 100}, 
                        {'interface': IInt, 'name': 'Width', 'value': 100}, 
                        {'interface': IInt, 'name': 'Chanel', 'value': 1}, 
                        {'interface': IEnumStr(enum=imagetypes), 'name': 'dtype', 'value': 'uint8'}],
                outputs=[{'interface': None, 'name': 'Image'}], 
                widgetmodule=None,
                widgetclass=None,
               )
               
__all__.append('opencv2_CreateImage')

opencv2_countNonZero = Factory(name='countNonZero',
 authors=' (M.Mielewczik)',
                description='',
                category='Image Processing',
                nodemodule='cv2',
                nodeclass='countNonZero',
                inputs=[{'interface': None, 'name': 'Image'}],
                outputs=[{'interface': IInt, 'name': 'count'}], 
                widgetmodule=None,
                widgetclass=None,
               )
               
__all__.append('opencv2_countNonZero')

opencv2_imsize = Factory(name='image_size',
 authors=' (M.Mielewczik)',
                description='Return the width, height, number of chanel and number of pixels',
                category='Image Processing',
                nodemodule='openalea.opencv.extension',
                nodeclass='image_size',
                inputs=[{'interface': None, 'name': 'Image'}],
                outputs=[{'interface': IInt, 'name': 'width'},
                        {'interface': IInt, 'name': 'height'},
                        {'interface': IInt, 'name': 'channelnumber'},
                        {'interface': IInt, 'name': 'pixels'}], #Bugfixed by changing the brackets
                widgetmodule=None,
                widgetclass=None,
                alias='readimageinfo'
               )
               
__all__.append('opencv2_imsize')

opencv2_putText = Factory(name='putText',
 authors=' (M.Mielewczik)',
                description='Draws a text/string.',
                category='Image Processing',
                nodemodule='openalea.opencv.nodes',
                nodeclass='putText',
                inputs=[{'interface': None, 'name': 'Image'},
                        {'interface': IStr, 'name': 'Text', 'value': ''},
                        {'interface': None, 'name': 'org', 'value': (450,450)},
                        {'interface': IEnumStr(enum=fontfaces), 'name': 'fontFace', 'value': 'FONT_HERSHEY_SIMPLEX'},
                        {'interface': IInt, 'name': 'fontScale', 'value': 8},
                        {'interface': IRGBColor, 'name': 'color', 'value': (255,0,0)},
                        {'interface': IInt, 'name': 'thickness', 'value': 3}],
                        #{'interface': IInt, 'name': 'lineType', 'value': 8}],                        
                outputs=[{'interface': None, 'name': 'Image'}], 
                widgetmodule=None,
                widgetclass=None,
               )
               
__all__.append('opencv2_putText')

opencv2_channel = Factory(name='channel',
                authors=' (C.Fournier)',
                description='Select a channel',
                category='Image Processing',
                nodemodule='openalea.opencv.extension',
                nodeclass='channel',
                inputs=[{'interface': None, 'name': 'Image'},
                {'interface': IInt, 'name': 'channel', 'value': 0},],
                outputs=({'interface': None, 'name': 'image'}),
                widgetmodule=None,
                widgetclass=None,
               )
__all__.append('opencv2_channel')

opencv2_crop = Factory(name='crop',
                authors=' (M.Mielewczik)',
                description='',
                category='Image Processing',
                nodemodule='openalea.opencv.extension',
                nodeclass='crop',
                #inputs=[{'interface': None, 'name': 'Image'}],
                outputs=({'interface': None, 'name': 'image'}, 
                        {'interface': IDict, 'name': 'crop info'}),
                widgetmodule=None,
                widgetclass=None,
               )
__all__.append('opencv2_crop')

opencv2_uncrop = Factory(name='uncrop',
                authors=' (C.Fournier)',
                description='',
                category='Image Processing',
                nodemodule='openalea.opencv.extension',
                nodeclass='uncrop',
                inputs=[{'interface': None, 'name': 'Image'},
                {'interface': IDict, 'name': 'crop info'}],
                outputs=({'interface': None, 'name': 'image'},),
                widgetmodule=None,
                widgetclass=None,
               )
__all__.append('opencv2_uncrop')