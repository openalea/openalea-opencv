# This file has been automatically generated by pkg_builder

from openalea.core import *

__name__ = 'openalea.opencv.image_transformation'
__version__ = '1.0.0'
__license__ = 'CeCILL-C'
__author__ = 'M.Mielewczik, C.Fournier, C. Pradal'
__institutes__ = None
__description__ = ''
__url__ = 'http://openalea.gforge.inria.fr'

__editable__ = 'True'
__icon__ = 'thresh.png'
__alias__ = []

threshtypes = ['THRESH_BINARY', 'THRESH_BINARY_INV', 'THRESH_TOZERO', 'THRESH_TOZERO_INV', 'THRESH_TRUNC']
adaptive_threshtypes = ['THRESH_BINARY', 'THRESH_BINARY_INV']
adaptive_methods = ['ADAPTIVE_THRESH_MEAN_C','ADAPTIVE_THRESH_GAUSSIAN_C']
interpolation_methods = ['INTER_NEAREST', 'INTER_LINEAR', 'INTER_AREA', 'INTER_CUBIC', 'INTER_LANCZOS4']

__all__ = ['opencv2_distanceTransform']



opencv2_distanceTransform = Factory(name='distanceTransform',
                authors=' (M.Mielewczik)',
                description='',
                category='Image Processing',
                nodemodule='openalea.opencv.nodes',
                nodeclass='distanceTransform',
                #inputs=[{'interface': IFileStr, 'name': 'Image'}],
                outputs=({'interface': None, 'name': 'out'},),
                widgetmodule=None,
                widgetclass=None,
               )
               
               
opencv2_inRange = Factory(name='inRange',
                authors=' (C.Fournier)',
                description='Threshold pixels that are in the range lowerb- upperb',
                category='Image Processing',
                nodemodule='cv2',
                nodeclass='inRange',
                inputs=[{'interface': None, 'name': 'Image'},
                        {'interface': ITuple, 'name': 'lowerb', 'value':(0,0,0)},
                        {'interface': ITuple, 'name': 'upperb', 'value':(255,255,223)}],
                outputs=({'interface': None, 'name': 'out'},),
                widgetmodule=None,
                widgetclass=None,
               )
__all__.append('opencv2_inRange')

opencv2_resize = Factory(name='resize',
                authors=' (C.Fournier)',
                description='Resize image',
                category='Image Processing',
                nodemodule='openalea.opencv.nodes',
                nodeclass='resize',
                inputs=[{'interface': None, 'name': 'Image'},
                        {'interface': ITuple, 'name': 'dsize', 'value':None, 'desc':'size of destination image'},
                        {'interface': IFloat, 'name': 'fx', 'value':0.5,'desc':'reduction across horizontal'},
                        {'interface': IFloat, 'name': 'fy', 'value':0.5,'desc':'reduction across vertical'},
                {'interface': IEnumStr(enum=interpolation_methods), 'name': 'interpolation', 'value': 'INTER_LINEAR'}],
                outputs=({'interface': None, 'name': 'out'},),
                widgetmodule=None,
                widgetclass=None,
               )               
__all__.append('opencv2_resize')


opencv2_maskimage = Factory(name='maskimage',
 authors=' (M.Mielewczik)',
                description='',
                category='Image Processing',
                nodemodule='openalea.opencv.extension',
                nodeclass='maskimage',
                inputs=[{'interface': None, 'name': 'Image'},
                        {'interface': None, 'name': 'mask'}],
                outputs=[{'interface': None, 'name': 'Image'}], 
                widgetmodule=None,
                widgetclass=None,
               )
               
__all__.append('opencv2_maskimage')


opencv2_threshold = Factory(name='threshold',
 authors=' (M.Mielewczik, C.Fournier)',
                description='',
                category='Image Processing',
                nodemodule='openalea.opencv.nodes',
                nodeclass='threshold',
                inputs=[{'interface': None, 'name': 'image'},
                        {'interface': IInt, 'name': 'thresh', 'value': 122},
                        {'interface': IInt, 'name': 'maxval', 'value': 255},
                        {'interface': IEnumStr(enum=threshtypes), 'name': 'treshtypes', 'value': 'THRESH_BINARY', 'desc': 'Select type of thresholding that should be used.'},
                        {'interface': IBool, 'name': 'Otsu thresholding', 'value': False, 'desc':'Use otsu algorithm to find the threshold value'},],
                outputs=[{'interface': None, 'name': 'Image'}], 
                widgetmodule=None,
                widgetclass=None,
               )
               
__all__.append('opencv2_threshold')


opencv2_adaptiveThreshold = Factory(name='adaptiveThreshold',
                authors=' (M.Mielewczik, C.Fournier)',
                description='',
                category='Image Processing',
                nodemodule='openalea.opencv.nodes',
                nodeclass='adaptiveThreshold',
                inputs=[{'interface': None, 'name': 'image'},
                        {'interface': IInt, 'name': 'maxval', 'value': 255},
                        {'interface': IEnumStr(enum=adaptive_methods), 'name': 'adaptive method', 'value': 'ADAPTIVE_THRESH_GAUSSIAN_C'},
                        {'interface': IEnumStr(enum=adaptive_threshtypes), 'name': 'treshtypes', 'value': 'THRESH_BINARY', 'desc': 'Select type of thresholding that should be used.'},
                        {'interface': IInt, 'name': 'blocksize', 'value': 5},
                       {'interface': IInt, 'name': 'offset', 'value': 0}],
                outputs=({'interface': None, 'name': 'out'},),
                widgetmodule=None,
                widgetclass=None,
               )
__all__.append('opencv2_adaptiveThreshold')            