# This file has been automatically generated by pkg_builder

from openalea.core import *

__name__ = 'openalea.opencv.contours'
__version__ = '1.0.0'
__license__ = 'CeCILL-C'
__author__ = 'M.Mielewczik, C.Fournier, C. Pradal'
__institutes__ = None
__description__ = ''
__url__ = 'http://openalea.gforge.inria.fr'

__editable__ = 'True'
__icon__ = 'contours.png'
__alias__ = []


__all__ = ['opencv2_convexHull', 'opencv2_drawContours',  'opencv2_findContours',]

opencv2_findContours = Factory(name='findContours',
                authors=' (M.Mielewczik, C.Fournier)',
                description='',
                category='Image Processing',
                nodemodule='openalea.opencv.extension',
                nodeclass='findContours',
                #inputs=[{'interface': IFileStr, 'name': 'Image'}],
                outputs=({'interface': None, 'name': 'contours'},
                        {'interface': None, 'name': 'hierarchy'},
                        {'interface': IInt, 'name': 'number of countours'},
                        {'interface': None, 'name': 'largest contour'}),
                widgetmodule=None,
                widgetclass=None,
               )
               
opencv2_ContoursProperties = Factory(name='ContoursProperties',
                authors=' (C.Fournier)',
                description='',
                category='Image Analysis',
                nodemodule='openalea.opencv.extension',
                nodeclass='ContoursProperties',
                #inputs=[{'interface': IFileStr, 'name': 'Image'}],
                outputs=({'interface': IDict, 'name': 'Properties'},),
                widgetmodule=None,
                widgetclass=None,
               )
__all__.append('opencv2_ContoursProperties')
               
# (CF) may  be add a IRGBColor interface ?
opencv2_drawContours = Factory(name='drawContours',
                authors=' (M.Mielewczik)',
                description='',
                category='Image Processing',
                nodemodule='openalea.opencv.extension',
                nodeclass='drawContours',
                #inputs=[{'interface': IFileStr, 'name': 'Image'}],
                outputs=({'interface': None, 'name': 'out'},),
                widgetmodule=None,
                widgetclass=None,
                )
 
opencv2_fitShape = Factory(name='fitShape',
                authors=' (C.Fournier)',
                description='',
                category='Image Processing',
                nodemodule='openalea.opencv.extension',
                nodeclass='fitShape',
                inputs=[{'interface': None, 'name': 'Contour'},
                        {'interface':IEnumStr(enum=['convexHull', 'boundingRect','minAreaRect','fitEllipse','minEnclosingCircle']), 'name':'fitting method', 'value':'convexHull'}],
                outputs=({'interface': None, 'name': 'shape'},{'interface': None, 'name': 'fitting method'}),
                widgetmodule=None,
                widgetclass=None,
               ) 
__all__.append('opencv2_fitShape')
 
opencv2_drawShape = Factory(name='drawShape',
                authors=' (C.Fournier)',
                description='',
                category='Image Processing',
                nodemodule='openalea.opencv.extension',
                nodeclass='drawShape',
                #inputs=[{'interface': IFileStr, 'name': 'Image'}],
                outputs=({'interface': None, 'name': 'out'},),
                widgetmodule=None,
                widgetclass=None,
               ) 
__all__.append('opencv2_drawShape')
 
opencv2_fitEllipse = Factory(name='fitEllipse',
                authors=' (M.Mielewczik)',
                description='Fit an Ellipse to a contour',
                category='Image Processing',
                nodemodule='cv2',
                nodeclass='fitEllipse',
                inputs=[{'interface': None, 'name': 'Contour'}],
                outputs=({'interface': None, 'name': 'out'},),
                widgetmodule=None,
                widgetclass=None,
               )
__all__.append('opencv2_fitEllipse')
               
               
opencv2_minAreaRect = Factory(name='minAreaRect',
                authors=' (M.Mielewczik)',
                description='find the smallest (inclined) enclosing rectangle  arround a contour',
                category='Image Processing',
                nodemodule='cv2',
                nodeclass='minAreaRect',
                inputs=[{'interface': None, 'name': 'Contour'}],
                outputs=({'interface': None, 'name': 'out'},),
                widgetmodule=None,
                widgetclass=None,
               )
__all__.append('opencv2_minAreaRect')

opencv2_boundingRect = Factory(name='boundingRect',
                authors=' (M.Mielewczik)',
                description='find the straight enclosing rectangle  arround a contour',
                category='Image Processing',
                nodemodule='cv2',
                nodeclass='boundingRect',
                inputs=[{'interface': None, 'name': 'Contour'}],
                outputs=({'interface': None, 'name': 'out'},),
                widgetmodule=None,
                widgetclass=None,
               )
__all__.append('opencv2_boundingRect')


opencv2_contourArea = Factory(name='contourArea',
                authors=' (M.Mielewczik)',
                description='Compute the area inside a contour',
                category='Image Processing',
                nodemodule='cv2',
                nodeclass='contourArea',
                inputs=[{'interface': None, 'name': 'Contour'}],
                outputs=({'interface': None, 'name': 'out'},),
                widgetmodule=None,
                widgetclass=None,
               )
__all__.append('opencv2_contourArea')


opencv2_convexHull = Factory(name='convexHull',
                authors=' (M.Mielewczik)',
                description='Calculates the convexhull of a contour',
                category='Image Processing',
                nodemodule='cv2',
                nodeclass='convexHull',
                inputs=[{'interface': None, 'name': 'Contour'}],
                outputs=({'interface': None, 'name': 'out'},),
                widgetmodule=None,
                widgetclass=None,
               )
               
opencv2_convexhullallcontours = Factory(name='convexhullallcontours',
                authors=' (M.Mielewczik)',
                description='Returns the enclosing convexHull arround a list of (close) contours',
                category='Image Processing',
                nodemodule='openalea.opencv.extension',
                nodeclass='convexhullallcontours',
                #inputs=[{'interface': IFileStr, 'name': 'Image'}],
                outputs=({'interface': None, 'name': 'out'},
                        {'interface': None, 'name': 'out'},
                        {'interface': None, 'name': 'out'},),
                widgetmodule=None,
                widgetclass=None,
               )

__all__.append('opencv2_convexhullallcontours')



               
# opencv2_convexityDefects = Factory(name='convexityDefects',
                # authors=' (M.Mielewczik)',
                # description='',
                # category='Unclassified',
                # nodemodule='openalea.opencv.opencv',
                # nodeclass='convexityDefects',
                # #inputs=[{'interface': IFileStr, 'name': 'Image'}],
                # outputs=({'interface': None, 'name': 'out'},{'interface': None, 'name': 'out'},),
                # widgetmodule=None,
                # widgetclass=None,
               # )

# __all__.append('opencv2_convexityDefects')        
               

